{"version":3,"sources":["components/Card.js","components/player/Player1.js","components/player/Player2.js","components/player/Player3.js","components/player/Player4.js","components/OtherPlayer.js","components/Table.js","components/InPlay.js","components/useForceUpdate.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Card","card","playCard","useState","setCardData","useEffect","name","onClick","src","process","isNaN","value","charAt","suit","alt","data-suit","data-value","data-number","number","data-name","data-power","power","data-player","player","className","Player","console","log","hand","map","key","OtherPlayer","id","Table","InPlay","cards","setCardsData","player1","player2","player3","player4","useForceUpdate","setTick","useCallback","tick","Game","setPlayer1","setPlayer2","setPlayer3","setPlayer4","deck","setDeck","count","cardsInPlay","setCardsInPlay","e","tempInPlay","target","dataset","tempPlayer","i","findIndex","splice","forceUpdate","suits","numbers","values","tempDeck","length","j","push","Math","floor","random","temp","score","turn","tempCard","to","path","component","Player1","Player2","Player3","Player4","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dc62e1c4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Card = ({ card, playCard }) => {\n  const [cardData, setCardData] = useState();\n\n  useEffect(() => {\n    setCardData(card);\n  }, [card]);\n\n  if (card && card.name) {\n    return (\n      <img\n        onClick={playCard}\n        src={`${process.env.PUBLIC_URL}/images/cards/${\n          !isNaN(card.value) ? card.value : card.value.charAt(0)\n        }${card.suit.charAt(0)}.png`}\n        alt={card.name}\n        data-suit={card.suit}\n        data-value={card.value}\n        data-number={card.number}\n        data-name={card.name}\n        data-power={card.power}\n        data-player={card.player}\n        className=\"card-img\"\n      />\n    );\n  } else {\n    return <div></div>;\n  }\n};\n\nexport default Card;\n","import React, { useState, useEffect } from 'react';\nimport Card from '../Card';\n\nconst Player = ({ player, playCard }) => {\n  const logPlayer = () => {\n    console.log(player);\n  };\n\n  return (\n    <div className=\"player\">\n      <button onClick={logPlayer}>Log Player</button>\n      <div className=\"cards-container\">\n        {player.hand &&\n          player.hand.map(card => (\n            <Card playCard={playCard} card={card} key={card.name} />\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Player;\n","import React, { useState, useEffect } from 'react';\nimport Card from '../Card';\n\nconst Player = ({ player, playCard }) => {\n  const logPlayer = () => {\n    console.log(player);\n  };\n\n  return (\n    <div className=\"player\">\n      <button onClick={logPlayer}>Log Player</button>\n      <div className=\"cards-container\">\n        {player.hand &&\n          player.hand.map(card => (\n            <Card playCard={playCard} card={card} key={card.name} />\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Player;\n","import React, { useState, useEffect } from 'react';\nimport Card from '../Card';\n\nconst Player = ({ player, playCard }) => {\n  const logPlayer = () => {\n    console.log(player);\n  };\n\n  return (\n    <div className=\"player\">\n      <button onClick={logPlayer}>Log Player</button>\n      <div className=\"cards-container\">\n        {player.hand &&\n          player.hand.map(card => (\n            <Card playCard={playCard} card={card} key={card.name} />\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Player;\n","import React, { useState, useEffect } from 'react';\nimport Card from '../Card';\n\nconst Player = ({ player, playCard }) => {\n  const logPlayer = () => {\n    console.log(player);\n  };\n\n  return (\n    <div className=\"player\">\n      <button onClick={logPlayer}>Log Player</button>\n      <div className=\"cards-container\">\n        {player.hand &&\n          player.hand.map(card => (\n            <Card playCard={playCard} card={card} key={card.name} />\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Player;\n","import React from 'react';\n\nconst OtherPlayer = ({ player }) => {\n  return (\n    <div className={`other-player ${player.id}`}>\n      <div className=\"card-back-container\">\n        {player.hand &&\n          player.hand.map(card => (\n            <img\n              src={`${process.env.PUBLIC_URL}/images/cards/red_back.png`}\n              alt=\"\"\n              key={card.name}\n              className=\"card-back\"\n            />\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default OtherPlayer;\n","import React from 'react';\n\nconst Table = () => {\n  return <div></div>;\n};\n\nexport default Table;\n","import React, { useState, useEffect } from 'react';\nimport Card from './Card';\n\nconst InPlay = ({ cards }) => {\n  const [cardsData, setCardsData] = useState(cards);\n\n  useEffect(() => {\n    setCardsData(cards);\n  }, [cards]);\n\n  return (\n    <div className=\"in-play\">\n      <div className=\"play-card play-1\">\n        <Card card={cards.player1} key={cards.player1.name} />\n      </div>\n      <div className=\"play-card play-2\">\n        <Card card={cards.player2} key={cards.player2.name} />\n      </div>\n      <div className=\"play-card play-3\">\n        <Card card={cards.player3} key={cards.player3.name} />\n      </div>\n      <div className=\"play-card play-4\">\n        <Card card={cards.player4} key={cards.player4.name} />\n      </div>\n    </div>\n  );\n};\n\nexport default InPlay;\n","import { useState, useCallback } from 'react';\n\nconst useForceUpdate = () => {\n  const [, setTick] = useState(0);\n  const update = useCallback(() => {\n    setTick(tick => tick + 1);\n  }, []);\n  return update;\n};\n\nexport default useForceUpdate;\n","import React, { useState } from 'react';\nimport Player1 from './player/Player1';\nimport Player2 from './player/Player2';\nimport Player3 from './player/Player3';\nimport Player4 from './player/Player4';\nimport OtherPlayer from './OtherPlayer';\nimport Table from './Table';\nimport InPlay from './InPlay';\nimport Card from './Card';\nimport { Link, Switch, Route } from 'react-router-dom';\n\nimport useForceUpdate from './useForceUpdate';\n\nconst Game = () => {\n  const [player1, setPlayer1] = useState({});\n  const [player2, setPlayer2] = useState({});\n  const [player3, setPlayer3] = useState({});\n  const [player4, setPlayer4] = useState({});\n\n  const [deck, setDeck] = useState([]);\n\n  const [cardsInPlay, setCardsInPlay] = useState({\n    player1: {},\n    player2: {},\n    player3: {},\n    player4: {},\n    count: 0\n  });\n\n  //   const [cardsInPlay, setCardsInPlay] = useState({\n  //     player1: {\n  //       suit: 'Spades',\n  //       value: 'King',\n  //       number: 13,\n  //       name: 'King of Spades',\n  //       power: 0,\n  //       player: 'player1'\n  //     },\n  //     player2: {\n  //       suit: 'Spades',\n  //       value: 'Queen',\n  //       number: 12,\n  //       name: 'Queen of Spades',\n  //       power: 0,\n  //       player: 'player2'\n  //     },\n  //     player3: {\n  //       suit: 'Spades',\n  //       value: 'Jack',\n  //       number: 11,\n  //       name: 'Jack of Spades',\n  //       power: 0,\n  //       player: 'player3'\n  //     },\n  //     player4: {\n  //       suit: 'Spades',\n  //       value: 'Ace',\n  //       number: 14,\n  //       name: 'Ace of Spades',\n  //       power: 0,\n  //       player: 'player4'\n  //     }\n  //   });\n\n  const generateDeck = () => {\n    const suits = ['Spades', 'Clubs', 'Hearts', 'Diamonds'];\n    const numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n    const values = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen', 'King', 'Ace'];\n    let tempDeck = [];\n    for (let i = 0; i < suits.length; i++) {\n      for (let j = 0; j < values.length; j++) {\n        tempDeck.push({\n          suit: suits[i],\n          value: values[j],\n          number: numbers[j],\n          name: `${values[j]} of ${suits[i]}`,\n          power: 0\n        });\n      }\n    }\n    setDeck(tempDeck);\n    console.log('Generated deck');\n  };\n\n  const printDeck = () => {\n    console.log(deck);\n  };\n\n  const printHands = () => {\n    console.log(\n      'Player 1:',\n      player1.hand.map(card => card.name)\n    );\n    console.log(\n      'Player 2:',\n      player2.hand.map(card => card.name)\n    );\n    console.log(\n      'Player 3:',\n      player3.hand.map(card => card.name)\n    );\n    console.log(\n      'Player 4:',\n      player4.hand.map(card => card.name)\n    );\n  };\n  const shuffleDeck = () => {\n    let tempDeck = deck;\n    for (let i = 0; i < tempDeck.length; i++) {\n      let j = Math.floor(Math.random() * tempDeck.length);\n      let temp = tempDeck[i];\n      tempDeck[i] = tempDeck[j];\n      tempDeck[j] = temp;\n    }\n    setDeck(tempDeck);\n    console.log('Shuffled deck');\n  };\n  const dealCards = () => {\n    for (let i = 1; i <= 4; i++) {\n      let tempPlayer = { id: `player${i}`, hand: [], score: 0, turn: false };\n      for (let j = 0; j < 13; j++) {\n        let cardIndex = j + (i - 1) * 13;\n        let tempCard = deck[cardIndex];\n        tempCard.player = `player${i}`;\n        tempPlayer.hand.push(tempCard);\n      }\n      if (i === 1) {\n        setPlayer1(tempPlayer);\n      } else if (i === 2) {\n        setPlayer2(tempPlayer);\n      } else if (i === 3) {\n        setPlayer3(tempPlayer);\n      } else if (i === 4) {\n        setPlayer4(tempPlayer);\n      }\n    }\n    console.log('Dealt cards');\n  };\n\n  const playCard = e => {\n    let tempInPlay = cardsInPlay;\n    tempInPlay[e.target.dataset.player] = {\n      suit: e.target.dataset.suit,\n      value: e.target.dataset.value,\n      number: e.target.dataset.number,\n      name: e.target.dataset.name,\n      power: e.target.dataset.power,\n      player: e.target.dataset.player\n    };\n    // increment cardsInPlay count\n    tempInPlay.count++;\n    setCardsInPlay(tempInPlay);\n\n    // remove card from player hand\n    // PLAYER 1\n    console.log(tempInPlay);\n    if (e.target.dataset.player === 'player1') {\n      let tempPlayer = player1;\n      const i = tempPlayer.hand.findIndex(\n        card => card.name === tempInPlay[tempPlayer.id].name\n      );\n      if (i > -1) {\n        tempPlayer.hand.splice(i, 1);\n      }\n      setPlayer1(tempPlayer);\n      // PLAYER 2\n    } else if (e.target.dataset.player === 'player2') {\n      let tempPlayer = player2;\n      const i = tempPlayer.hand.findIndex(\n        card => card.name === tempInPlay[tempPlayer.id].name\n      );\n      if (i > -1) {\n        tempPlayer.hand.splice(i, 1);\n      }\n      setPlayer2(tempPlayer);\n      // PLAYER 3\n    } else if (e.target.dataset.player === 'player3') {\n      let tempPlayer = player3;\n      const i = tempPlayer.hand.findIndex(\n        card => card.name === tempInPlay[tempPlayer.id].name\n      );\n      if (i > -1) {\n        tempPlayer.hand.splice(i, 1);\n      }\n      setPlayer3(tempPlayer);\n      // PLAYER 4\n    } else if (e.target.dataset.player === 'player4') {\n      let tempPlayer = player4;\n      const i = tempPlayer.hand.findIndex(\n        card => card.name === tempInPlay[tempPlayer.id].name\n      );\n      if (i > -1) {\n        tempPlayer.hand.splice(i, 1);\n      }\n      setPlayer4(tempPlayer);\n    }\n\n    forceUpdate(); // forces rerender\n  };\n  const forceUpdate = useForceUpdate();\n  return (\n    <>\n      <button onClick={generateDeck}>Generate Deck</button>\n      <button onClick={shuffleDeck}>Shuffle Deck</button>\n      <button onClick={printDeck}>Print Deck</button>\n      <button onClick={dealCards}>Deal Cards</button>\n      <button onClick={printHands}>Print Hands</button>\n      <Link to=\"/play/1\">Player 1</Link>\n      <Link to=\"/play/2\">Player 2</Link>\n      <Link to=\"/play/3\">Player 3</Link>\n      <Link to=\"/play/4\">Player 4</Link>\n      <div className=\"table\">\n        <div className=\"player-3\"></div>\n        <Table />\n        <InPlay cards={cardsInPlay} />\n        <Switch>\n          <Route\n            path=\"/play/1\"\n            component={() => <Player1 player={player1} playCard={playCard} />}\n          />\n          <Route\n            path=\"/play/2\"\n            component={() => <Player2 player={player2} playCard={playCard} />}\n          />\n          <Route\n            path=\"/play/3\"\n            component={() => <Player3 player={player3} playCard={playCard} />}\n          />\n          <Route\n            path=\"/play/4\"\n            component={() => <Player4 player={player4} playCard={playCard} />}\n          />\n        </Switch>\n        <OtherPlayer player={player2} />\n        <OtherPlayer player={player3} />\n        <OtherPlayer player={player4} />\n      </div>\n    </>\n  );\n};\n\nexport default Game;\n","import React, { useState } from 'react';\nimport Game from './components/Game';\n\nimport './App.css';\n\nconst App = () => {\n  return (\n    <>\n      <Game />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}